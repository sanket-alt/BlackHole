THREE.WebGLShader: gl.getShaderInfoLog() fragment ERROR: 0:508: 'mix' : function name expected
ERROR: 0:508: '=' : dimension mismatch
ERROR: 0:508: 'assign' : cannot convert from 'const mediump float' to 'highp 4-component vector of float'
 1: precision highp float;
2: precision highp int;
3: #define SHADER_NAME ShaderMaterial
4: #define MAX_DIR_LIGHTS 0
5: #define MAX_POINT_LIGHTS 0
6: #define MAX_SPOT_LIGHTS 0
7: #define MAX_HEMI_LIGHTS 0
8: #define MAX_SHADOWS 0
9: #define GAMMA_FACTOR 2
10: uniform mat4 viewMatrix;
11: uniform vec3 cameraPosition;
12: 
13: #define M_PI 3.1415926535897932384626433832795
14: #define R_SQRT_2 0.7071067811865475
15: #define DEG_TO_RAD (M_PI/180.0)
16: #define SQ(x) ((x)*(x))
17: 
18: #define ROT_Y(a) mat3(cos(a), 0, sin(a), 0, 1, 0, -sin(a), 0, cos(a))
19: 
20: 
21: // spectrum texture lookup helper macros
22: const float BLACK_BODY_TEXTURE_COORD = 1.0;
23: const float SINGLE_WAVELENGTH_TEXTURE_COORD = 0.5;
24: const float TEMPERATURE_LOOKUP_RATIO_TEXTURE_COORD = 0.0;
25: 
26: // black-body texture metadata
27: const float SPECTRUM_TEX_TEMPERATURE_RANGE = 65504.0;
28: const float SPECTRUM_TEX_WAVELENGTH_RANGE = 2048.0;
29: const float SPECTRUM_TEX_RATIO_RANGE = 6.48053329012;
30: 
31: #define BLACK_BODY_COLOR(t) texture2D(spectrum_texture, vec2((t) / SPECTRUM_TEX_TEMPERATURE_RANGE, BLACK_BODY_TEXTURE_COORD))
32: #define SINGLE_WAVELENGTH_COLOR(lambda) texture2D(spectrum_texture, vec2((lambda) / SPECTRUM_TEX_WAVELENGTH_RANGE, SINGLE_WAVELENGTH_TEXTURE_COORD))
33: #define TEMPERATURE_LOOKUP(ratio) (texture2D(spectrum_texture, vec2((ratio) / SPECTRUM_TEX_RATIO_RANGE, TEMPERATURE_LOOKUP_RATIO_TEXTURE_COORD)).r * SPECTRUM_TEX_TEMPERATURE_RANGE)
34: 
35: uniform vec2 resolution;
36: uniform float time;
37: 
38: uniform vec3 cam_pos;
39: uniform vec3 cam_x;
40: uniform vec3 cam_y;
41: uniform vec3 cam_z;
42: uniform vec3 cam_vel;
43: 
44: uniform float planet_distance, planet_radius;
45: 
46: uniform float noise_scale;
47: uniform float noise_speed;
48: 
49: // Magnetic field uniforms
50: uniform float magnetic_strength;
51: uniform float magnetic_dipole_tilt;
52: uniform float field_lines_density;
53: uniform vec3 field_color;
54: uniform int show_plasma_effects;
55: 
56: // --- HAWKING RADIATION UNIFORMS ---
57: uniform bool hawking_radiation_enabled;
58: uniform int hawking_mode; // 0: Quantum Source, 1: Energy Spectrum, 2: Evaporation
59: uniform float hawking_temperature;
60: uniform float bh_radius; // Schwarzschild radius, now dynamic
61: 
62: uniform sampler2D galaxy_texture, star_texture,
63:     planet_texture, spectrum_texture;
64: 
65: // stepping parameters
66: const int NSTEPS = 100;
67: const float MAX_REVOLUTIONS = 2.0;
68: 
69: const float ACCRETION_MIN_R_FACTOR = 1.5; // Factor of bh_radius
70: const float ACCRETION_WIDTH_FACTOR = 5.0; // Factor of bh_radius
71: const float ACCRETION_BRIGHTNESS = 1.2;
72: const float ACCRETION_TEMPERATURE = 8000.0;
73: 
74: const float STAR_MIN_TEMPERATURE = 4000.0;
75: const float STAR_MAX_TEMPERATURE = 15000.0;
76: 
77: const float STAR_BRIGHTNESS = 1.0;
78: const float GALAXY_BRIGHTNESS = 0.4;
79: 
80: const float PLANET_AMBIENT = 0.1;
81: const float PLANET_LIGHTNESS = 1.5;
82: 
83: mat3 BG_COORDS = ROT_Y(45.0 * DEG_TO_RAD);
84: const float PLANET_AXIAL_TILT = 30.0 * DEG_TO_RAD;
85: mat3 PLANET_COORDS = ROT_Y(PLANET_AXIAL_TILT);
86: 
87: const float FOV_ANGLE_DEG = 90.0;
88: float FOV_MULT = 1.0 / tan(DEG_TO_RAD * FOV_ANGLE_DEG*0.5);
89: 
90: float PLANET_RADIUS,
91:     PLANET_DISTANCE,
92:     PLANET_ORBITAL_ANG_VEL,
93:     PLANET_ROTATION_ANG_VEL,
94:     PLANET_GAMMA;
95: 
96: // --- START PROCEDURAL NOISE FUNCTIONS ---
97: vec3 hash33(vec3 p) {
98:     p = fract(p * vec3(443.897, 441.423, 437.195));
99:     p += dot(p, p.yzx + 19.19);
100:     return fract((p.xxy + p.yxx)*p.zyx);
101: }
102: 
103: float rand(vec2 n) {
104:     return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
105: }
106: 
107: float noise(vec2 p) {
108:     vec2 ip = floor(p);
109:     vec2 u = fract(p);
110:     u = u*u*(3.0-2.0*u);
111: 
112:     float res = mix(
113:         mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),
114:         mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x),
115:         u.y);
116:     return res*res;
117: }
118: 
119: float fbm(vec2 p) {
120:     float f = 0.0;
121:     mat2 m = mat2(1.6, 1.2, -1.2, 1.6);
122:     f += 0.5000 * noise(p); p = m * p;
123:     f += 0.2500 * noise(p); p = m * p;
124:     f += 0.1250 * noise(p); p = m * p;
125:     f += 0.0625 * noise(p);
126:     return f / 0.9375;
127: }
128: // --- END PROCEDURAL NOISE FUNCTIONS ---
129: 
130: // --- HAWKING RADIATION VISUALIZATION (USER-FRIENDLY) ---
131: vec4 get_hawking_radiation_color(vec3 pos_at_horizon, float u) {
132:     if (!hawking_radiation_enabled) return vec4(0.0);
133: 
134:     float horizon_proximity = 1.0 - smoothstep(1.0/bh_radius, 1.0/bh_radius + 0.5, u);
135:     if (horizon_proximity < 0.01) return vec4(0.0);
136: 
137:     vec4 color = vec4(0.0);
138:     vec3 p_hash = hash33(pos_at_horizon * 50.0); // Use a larger scale for more distinct particles
139: 
140:     // --- Mode 0: Quantum Source (Particle Pair Analogy) ---
141:     ifâ€¦
THREE.WebGLProgram: shader error:  0 gl.VALIDATE_STATUS false gl.getProgramInfoLog Fragment shader is not compiled.
  ERROR: 0:508: 'mix' : function name expected
ERROR: 0:508: '=' : dimension mismatch
ERROR: 0:508: 'assign' : cannot convert from 'const mediump float' to 'highp 4-component vector of float'

